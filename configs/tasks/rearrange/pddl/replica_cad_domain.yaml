#types:
#    - robot
#    - fridge
#art_objs:
#    cab: 0
#    fridge: 1

# Matches a string to the START of the entity ID.
action_to_entity_mapping:
  "cab":
    match_entity_type: []
    match_id_str: "cab"
    matching_skills:
      - "open_cab"
      - "close_cab"
  "fridge":
    match_entity_type: []
    match_id_str: "fridge"
    matching_skills:
      - "open_fridge"
      - "close_fridge"
  "goal":
    match_entity_type: ["goal"]
    match_id_str: ""
    matching_skills:
    - "place"
  "rigid":
    match_entity_type: ["rigid"]
    match_id_str: ""
    matching_skills:
    - "pick"

markers:
    cab_top_left: cab_push_point_7
actions:
    - name: nav
      parameters: [obj_to]
      task: RearrangeNavToObjTask-v0
      task_def: "nav_to_obj"
      precondition: []
      postcondition:
        - "at(robot,obj_to)"
      task_args:
        TASK.FORCE_REGENERATE: True

    - name: nav_to_receptacle
      parameters: [recep_to,obj_to]
      task: RearrangeNavToObjTask-v0
      task_def: "nav_to_obj"
      precondition: []
      postcondition:
        - "at(robot,recep_to)"
      task_args:
        TASK.FORCE_REGENERATE: True

    - name: pick
      parameters: [obj]
      task: RearrangePickTask-v0
      task_def: "pick"
      precondition:
          - "at(robot,obj)"
          #- "!in(obj,cab_top_left) OR opened_cab(cab_top_left)"
          #- "!in(obj,fridge) OR opened_fridge()"
      postcondition:
        - "holding(obj)"
      task_args:
        TASK.SHOULD_ENFORCE_TARGET_WITHIN_REACH: True
        TASK.FORCE_REGENERATE: True
        TASK.BASE_ANGLE_NOISE: 0.0
        TASK.BASE_NOISE: 0.0

    - name: place
      parameters: [obj, targ]
      task: RearrangePlaceTask-v0
      task_def: "place"
      precondition:
          - "holding(obj)"
      postcondition:
          - "not_holding()"
          - "at(obj,targ)"
      task_args:
        TASK.SHOULD_ENFORCE_TARGET_WITHIN_REACH: True
        TASK.FORCE_REGENERATE: True
        TASK.BASE_ANGLE_NOISE: 0.0
        TASK.BASE_NOISE: 0.0

    # Fridge
    - name: open_fridge
      parameters: [obj]
      task_def: "open_fridge"
      task: RearrangeOpenFridgeTask-v0
      precondition: ["at(robot,fridge)","closed_fridge()"]
      postcondition: ["opened_fridge()"]
      task_args:
        TASK.BASE_ANGLE_NOISE: 0.0
        TASK.SPAWN_REGION_SCALE: 0.0

    - name: close_fridge
      parameters: [obj]
      task_def: "close_fridge"
      task: RearrangeCloseFridgeTask-v0
      precondition: ["at(robot,fridge)","opened_fridge()"]
      postcondition: ["closed_fridge()"]
      task_args:
        TASK.BASE_ANGLE_NOISE: 0.0
        TASK.SPAWN_REGION_SCALE: 0.0

    # Cab
    - name: open_cab
      parameters: [cab_id, obj]
      task_def: "open_cab"
      task: RearrangeOpenDrawerTask-v0
      precondition: ["at(robot,cab_id)","closed_cab(cab_id)"]
      postcondition: ["opened_cab(cab_id)"]
      task_args:
        TASK.BASE_ANGLE_NOISE: 0.0
        TASK.SPAWN_REGION_SCALE: 0.0

    - name: close_cab
      parameters: [cab_id, obj]
      task_def: "close_cab"
      task: RearrangeCloseDrawerTask-v0
      precondition: ["at(robot,cab_id)","opened_cab(cab_id)"]
      postcondition: ["closed_cab(cab_id)"]
      task_args:
        TASK.BASE_ANGLE_NOISE: 0.0
        TASK.SPAWN_REGION_SCALE: 0.0
predicates:
    - name: in
      args: [X, Y]

    - name: holding
      args: [X]
      state:
        robo:
            holding: "X"
    - name: not_holding
      state:
        robo:
            holding: 'NONE'
    - name: opened_cab
      args: [cab_id]
      state:
        arg_spec:
          name_match: "cab"
        art_states:
          cab_id: 0.45

    - name: closed_cab
      args: [cab_id]
      state:
        arg_spec:
          name_match: "cab"
        art_states:
          cab_id: 0.0

    - name: opened_fridge
      state:
        art_states:
          fridge_push_point: 1.22

    - name: closed_fridge
      state:
        art_states:
          fridge_push_point: 0.0

    - name: at
      args: [robot,Y]
      state:
        robo:
            pos: Y
    - name: at
      args: [X,Y]
      state:
          obj_states:
              X: Y
