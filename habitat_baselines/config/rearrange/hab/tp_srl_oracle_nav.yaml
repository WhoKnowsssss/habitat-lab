VERBOSE: False
BASE_TASK_CONFIG_PATH: configs/tasks/rearrange/nav_pick.yaml
TRAINER_NAME: "ddppo"
ENV_NAME: "RearrangeRLEnv"
SIMULATOR_GPU_ID: 0
TORCH_GPU_ID: 0
VIDEO_OPTION: ["disk"]
TENSORBOARD_DIR: "tb"
VIDEO_DIR: "video_dir"
VIDEO_FPS: 30
VIDEO_RENDER_TOP_DOWN: False
VIDEO_RENDER_ALL_INFO: True
TEST_EPISODE_COUNT: -1
EVAL_CKPT_PATH_DIR: "data/new_checkpoints"
NUM_ENVIRONMENTS: 1
WRITER_TYPE: 'tb'
# Visual sensors to include
SENSORS: ["HEAD_DEPTH_SENSOR"]
CHECKPOINT_FOLDER: "data/new_checkpoints"
NUM_UPDATES: -1
TOTAL_NUM_STEPS: 1.0e8
LOG_INTERVAL: 10
NUM_CHECKPOINTS: 20
FORCE_TORCH_SINGLE_THREADED: True
EVAL_KEYS_TO_INCLUDE_IN_NAME: ['reward', 'force', 'success']
EVAL:
  SPLIT: "eval"
  USE_CKPT_CONFIG: False
  SHOULD_LOAD_CKPT: False

# IL SAVE OPTIONS
DATASET_SAVE_PATH: "/srv/share/aszot3/share_demos/nav_pick_03_09/"
DATASET_SAVE_INTERVAL: 10
DATASET_SAVE_ENCODER: True
DATASET_SAVE_VISUAL_ENCODED: False

RL:
  POLICY:
      name: "HierarchicalPolicy"
      high_level_policy:
        name: "GtHighLevelPolicy"
      DEFINED_SKILLS:
        NN_PICK:
          skill_name: "PickSkillPolicy"
          name: "PointNavResNetPolicy"
          action_distribution_type: "gaussian"
          include_visual_keys: ["robot_head_depth"]
          AT_RESTING_THRESHOLD: 0.15
          OBS_SKILL_INPUTS: ["obj_start_sensor"]
          ACTION_DIST:
             use_log_std: True
          LOAD_CKPT_FILE: "data/models/pick.pth"
          MAX_SKILL_STEPS: 200

        NN_PLACE:
          skill_name: "PlaceSkillPolicy"
          name: "PointNavResNetPolicy"
          action_distribution_type: "gaussian"
          include_visual_keys: ["robot_head_depth"]
          AT_RESTING_THRESHOLD: 0.15
          OBS_SKILL_INPUTS: ["obj_goal_sensor"]
          ACTION_DIST:
             use_log_std: True
          LOAD_CKPT_FILE: "data/models/place.pth"
          MAX_SKILL_STEPS: 200

        NN_NAV:
          skill_name: "NavSkillPolicy"
          name: "PointNavResNetPolicy"
          action_distribution_type: "gaussian"
          include_visual_keys: ["robot_head_depth"]
          OBS_SKILL_INPUTS: ["obj_start_sensor"]
          ORACLE_STOP: False
          ORACLE_STOP_ANGLE_DIST: 0.2
          ORACLE_STOP_DIST: 0.2
          ACTION_DIST:
             use_log_std: True
          LOAD_CKPT_FILE: "data/models/nav.pth"
          MAX_SKILL_STEPS: 300

        GT_NAV:
          skill_name: "OracleNavPolicy"
          include_visual_keys: ["robot_head_depth"]
          OBS_SKILL_INPUTS: ["obj_start_sensor", "abs_obj_start_sensor", "obj_goal_sensor", "abs_obj_goal_sensor"]
          GOAL_SENSORS: ["obj_goal_sensor", "abs_obj_goal_sensor"]
          # GT nav
          TURN_THRESH: 0.1
          DIST_THRESH: 0.2
          LOOK_AT_OBJ_THRESH: 0.2
          TURN_VELOCITY: 1.0
          FORWARD_VELOCITY: 1.0
          MAX_SKILL_STEPS: 300
          NAV_ACTION_NAME: "BASE_VELOCITY"

      USE_SKILLS:
        pick: "NN_PICK"
        place: "NN_PLACE"
        nav: "GT_NAV"
        nav_to_receptacle: "GT_NAV"

  REWARD_MEASURE: "composite_reward"
  SUCCESS_MEASURE: "composite_success"
  SUCCESS_REWARD: 100.0
  SLACK_REWARD: -0.01
  GYM_OBS_KEYS: ['robot_head_depth', 'obj_start_sensor', 'joint', 'is_holding', 'relative_resting_position']

  PPO:
    # ppo params
    clip_param: 0.2
    ppo_epoch: 2
    num_mini_batch: 2
    value_loss_coef: 0.5
    entropy_coef: 0.0001
    lr: 2.5e-4
    eps: 1e-5
    max_grad_norm: 0.2
    num_steps: 128
    use_gae: True
    gamma: 0.99
    tau: 0.95
    use_linear_clip_decay: False
    use_linear_lr_decay: False
    reward_window_size: 50

    use_normalized_advantage: False

    hidden_size: 512

    # Use double buffered sampling, typically helps
    # when environment time is similar or large than
    # policy inference time during rollout generation
    use_double_buffered_sampler: False

  DDPPO:
    sync_frac: 0.6
    # The PyTorch distributed backend to use
    distrib_backend: NCCL
    # Visual encoder backbone
    pretrained_weights: data/ddppo-models/gibson-2plus-resnet50.pth
    # Initialize with pretrained weights
    pretrained: False
    # Initialize just the visual encoder backbone with pretrained weights
    pretrained_encoder: False
    # Whether or not the visual encoder backbone will be trained.
    train_encoder: True
    # Whether or not to reset the critic linear layer
    reset_critic: False

    # Model parameters
    backbone: resnet50
    rnn_type: LSTM
    num_recurrent_layers: 2
